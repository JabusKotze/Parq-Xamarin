{"Name":"Android AltBeacon Library","Id":2316,"Alias":"android-altbeacon-library","Description":"A Xamarin.Android binding of the [AltBeacon Android Beacon Library](https://github.com/AltBeacon/android-beacon-library). This library allows Android apps to interact with BLE beacons in accordance with the open and interoperable [AltBeacon proximity beacon protocol specification](https://github.com/AltBeacon/spec).\r\n\r\n##What does this library do?\r\n\r\nAllows Android apps to interact with BLE beacons.\r\n\r\n## Reference Application\r\n\r\nFor a simple working example of Ranging BLE beacons with Xamarin.Android, check out the [Sample Application](https://github.com/chrisriesgo/Android-AltBeacon-Library/tree/master/Samples/Android/AndroidAltBeaconLibrary.Sample).","Version":"2.7","Summary":"Proximity beacon ranging and monitoring library for Xamarin.Android apps.","QuickStart":"## Ranging Example Code\r\n\r\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Threading.Tasks;\n\tusing AltBeaconOrg.BoundBeacon;\n\tusing Android.App;\n\tusing Android.Content;\n\t\n\tusing Android.Graphics;\n\tusing Android.OS;\n\tusing Android.Util;\n\tusing Android.Widget;\n\t\n\tnamespace AndroidAltBeaconLibrary.Sample\n\t{\n\t\t[Activity(Label = \"AltBeacon Sample\", \n\t\t\tMainLauncher = true,\n\t\t\tLaunchMode = Android.Content.PM.LaunchMode.SingleInstance,\n\t\t\tTheme = \"@style/Theme.AltBeacon\",\n\t\t\tIcon = \"@drawable/altbeacon\")]\n\t\tpublic class MainActivity : Activity, IDialogInterfaceOnDismissListener, IBeaconConsumer\n\t\t{\n\t\t\tprivate readonly RangeNotifier _rangeNotifier;\n\t\n\t\t\tAltBeaconOrg.BoundBeacon.Region _tagRegion, _emptyRegion;\n\t\n\t\t\tprivate Button _backgroundButton, _stopButton, _startButton;\n\t\t\tprivate ListView _list;\n\t\t\tprivate BeaconManager _beaconManager;\n\t\t\tprivate readonly List\u003cBeacon\u003e _data;\n\t\n\t\t\tpublic MainActivity()\n\t\t\t{\n\t\t\t\t_rangeNotifier = new RangeNotifier();\n\t\t\t\t_data = new List\u003cBeacon\u003e();\n\t\t\t}\n\t\n\t\t\tprotected override void OnCreate(Bundle bundle)\n\t\t\t{\n\t\t\t\tbase.OnCreate(bundle);\n\t\n\t\t\t\tSetContentView(Resource.Layout.MainActivity);\n\t\n\t\t\t\t_backgroundButton = FindViewById\u003cButton\u003e(Resource.Id.backgroundButton);\n\t\t\t\t_stopButton = FindViewById\u003cButton\u003e(Resource.Id.stopButton);\n\t\t\t\t_startButton = FindViewById\u003cButton\u003e(Resource.Id.startButton);\n\t\t\t\t_list = FindViewById\u003cListView\u003e(Resource.Id.list);\n\t\n\t\t\t\t_list.Adapter = new ListSource((data, position, convertView, parent) =\u003e \n\t\t\t\t{\n\t\t\t\t\tvar view = convertView;\n\t\t\t\t\tvar beacon = data[position];\n\t\n\t\t\t\t\tif (view == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tview  = LayoutInflater.Inflate(Resource.Layout.ListItem, parent, false);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tview.FindViewById\u003cTextView\u003e(Resource.Id.beaconId).Text = beacon.Id1.ToString().ToUpper();\n\t\t\t\t\tview.FindViewById\u003cTextView\u003e(Resource.Id.beaconDistance).Text = string.Format(\"{0:N2}m\", beacon.Distance);\n\t\n\t\t\t\t\treturn view;\n\t\t\t\t});\n\t\n\t\t\t\tVerityBluetooth();\n\t\n\t\t\t\t_beaconManager = BeaconManager.GetInstanceForApplication(this);\n\n\t\t\t\tvar iBeaconParser = new BeaconParser();\n\t\t\t\t//\tEstimote \u003e 2013\n\t\t\t\tiBeaconParser.SetBeaconLayout(\"m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24\");\n\t\t\t\t_beaconManager.BeaconParsers.Add(iBeaconParser);\n\t\t\t\t_beaconManager.Bind(this);\t\n\t\t\t\t_rangeNotifier.DidRangeBeaconsInRegionComplete += RangingBeaconsInRegion;\n\t\t\t}\n\t\n\t\t\tprotected override void OnResume()\n\t\t\t{\n\t\t\t\tbase.OnResume();\n\t\n\t\t\t\t((BeaconReferenceApplication) this.ApplicationContext).MainActivity = this;\n\t\n\t\t\t\t_backgroundButton.Click += OnBackgroundClick;\n\t\t\t\t_stopButton.Click += OnStopClick;\n\t\t\t\t_startButton.Click += OnStartClick;\n\t\n\t\t\t\tif(_beaconManager.IsBound(this))\n\t\t\t\t{\n\t\t\t\t\t_beaconManager.SetBackgroundMode(false);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvoid OnStopClick (object sender, EventArgs e)\n\t\t\t{\n\t\t\t\t_stopButton.Enabled = false;\n\t\t\t\t_startButton.Enabled = true;\n\t\n\t\t\t\t_beaconManager.StopRangingBeaconsInRegion(_tagRegion);\n\t\t\t\t_beaconManager.StopRangingBeaconsInRegion(_emptyRegion);\n\t\t\t}\n\t\n\t\t\tasync void OnStartClick(object sender, EventArgs e)\n\t\t\t{\n\t\t\t\t_startButton.Enabled = false;\n\t\t\t\t_stopButton.Enabled = true;\n\t\n\t\t\t\tawait ClearData();\n\t\n\t\t\t\t_beaconManager.StartRangingBeaconsInRegion(_tagRegion);\n\t\t\t\t_beaconManager.StartRangingBeaconsInRegion(_emptyRegion);\n\t\t\t}\n\t\n\t\t\tprotected override void OnPause()\n\t\t\t{\n\t\t\t\tbase.OnPause();\n\t\n\t\t\t\t_backgroundButton.Click -= OnBackgroundClick;\n\t\t\t\t_stopButton.Click -= OnStopClick;\n\t\t\t\t_startButton.Click -= OnStartClick;\n\t\n\t\t\t\tif(_beaconManager.IsBound(this))\n\t\t\t\t{\n\t\t\t\t\t_beaconManager.SetBackgroundMode(true);\n\t\t\t\t}\n\t\n\t\t\t\t((BeaconReferenceApplication) this.ApplicationContext).MainActivity = null;\n\t\t\t}\n\t\n\t\t\tprotected override void OnDestroy()\n\t\t\t{\n\t\t\t\tbase.OnDestroy();\n\t\t\t\tif(_beaconManager.IsBound(this)) _beaconManager.Unbind(this);\n\t\t\t}\n\t\n\t\t\tasync void RangingBeaconsInRegion(object sender, RangeEventArgs e)\n\t\t\t{\n\t\t\t\tawait ClearData();\n\t\n\t\t\t\tvar allBeacons = new List\u003cBeacon\u003e();\n\t\t\t\tif(e.Beacons.Count \u003e 0)\n\t\t\t\t{\n\t\t\t\t\tforeach(var b in e.Beacons)\n\t\t\t\t\t{\n\t\t\t\t\t\tallBeacons.Add(b);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar orderedBeacons = allBeacons.OrderBy(b =\u003e b.Distance).ToList();\n\t\t\t\t\tawait UpdateData(orderedBeacons);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// unknown\n\t\t\t\t\tawait ClearData();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvoid RemoveBeaconsNoLongerVisible(List\u003cBeacon\u003e allBeacons)\n\t\t\t{\n\t\t\t\tif(allBeacons == null || allBeacons.Count == 0) return;\n\t\n\t\t\t\tvar delete = new List\u003cBeacon\u003e();\n\t\t\t\tforeach(var d in _data)\n\t\t\t\t{\n\t\t\t\t\tif(allBeacons.All(ab =\u003e ab.Id1.ToString() != d.Id1.ToString()))\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete.Add(d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t_data.RemoveAll(d =\u003e delete.Any(del =\u003e del.Id1.ToString() == d.Id1.ToString()));\n\t\n\t\t\t\tif(delete.Count \u003e 0)\n\t\t\t\t{\n\t\t\t\t\tdelete = null;\n\t\t\t\t\tUpdateList();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tvoid OnBackgroundClick(object sender, EventArgs e)\n\t\t\t{\n\t\t\t\tvar intent = new Intent(this, typeof(BackgroundActivity));\n\t\t\t\tStartActivity(intent);\n\t\t\t}\n\t\n\t\t\tvoid VerityBluetooth()\n\t\t\t{\n\t\t\t\ttry \n\t\t\t\t{\n\t\t\t\t\tif (!BeaconManager.GetInstanceForApplication(this).CheckAvailability())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar builder = new AlertDialog.Builder(this);\n\t\t\t\t\t\tbuilder.SetTitle(\"Bluetooth not enabled\");\n\t\t\t\t\t\tbuilder.SetMessage(\"Please enable bluetooth in settings and restart this application.\");\n\t\t\t\t\t\tEventHandler\u003cDialogClickEventArgs\u003e handler = null;\n\t\t\t\t\t\tbuilder.SetPositiveButton(Android.Resource.String.Ok, handler);\n\t\t\t\t\t\tbuilder.SetOnDismissListener(this);\n\t\t\t\t\t\tbuilder.Show();\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\t\t\t\tcatch (BleNotAvailableException e) \n\t\t\t\t{\n\t\t\t\t\tLog.Debug(\"BleNotAvailableException\", e.Message);\n\t\n\t\t\t\t\tvar builder = new AlertDialog.Builder(this);\n\t\t\t\t\tbuilder.SetTitle(\"Bluetooth LE not available\");\n\t\t\t\t\tbuilder.SetMessage(\"Sorry, this device does not support Bluetooth LE.\");\n\t\t\t\t\tEventHandler\u003cDialogClickEventArgs\u003e handler = null;\n\t\t\t\t\tbuilder.SetPositiveButton(Android.Resource.String.Ok, handler);\n\t\t\t\t\tbuilder.SetOnDismissListener(this);\n\t\t\t\t\tbuilder.Show();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tprivate async Task UpdateDisplay(string message, Color color = default(Color))\n\t\t\t{\n\t\t\t}\n\t\n\t\t\tprivate async Task UpdateData(List\u003cBeacon\u003e beacons)\n\t\t\t{\n\t\t\t\tawait Task.Run(() =\u003e\n\t\t\t\t{\t\n\t\t\t\t\tvar newBeacons = new List\u003cBeacon\u003e();\n\t\t\t\t\tforeach(var beacon in beacons)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(_data.All(b =\u003e b.Id1.ToString() == beacon.Id1.ToString()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewBeacons.Add(beacon);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tRunOnUiThread(() =\u003e\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach(var beacon in newBeacons)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_data.Add(beacon);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (newBeacons.Count \u003e 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_data.Sort((x,y) =\u003e x.Distance.CompareTo(y.Distance));\n\t\t\t\t\t\t\tUpdateList();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tasync void EnteredRegion(object sender, MonitorEventArgs e)\n\t\t\t{\n\t\t\t\tawait UpdateDisplay(\"A new beacon just showed up!\");\n\t\t\t}\n\t\n\t\t\tasync void ExitedRegion(object sender, MonitorEventArgs e)\n\t\t\t{\n\t\t\t\tawait UpdateDisplay(\"They went away :(\");\n\t\t\t}\n\t\n\t\t\tasync void DeterminedStateForRegionComplete(object sender, MonitorEventArgs e)\n\t\t\t{\n\t\t\t\tawait UpdateDisplay(\"I have just switched from seeing/not seeing beacons: \" + e.State);\n\t\t\t}\n\t\n\t\t\tpublic bool BindService(Intent p0, IServiceConnection p1, int p2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\tpublic void OnBeaconServiceConnect()\n\t\t\t{\n\t\t\t\t_beaconManager.SetForegroundBetweenScanPeriod(5000); // 5000 milliseconds\n\t\n\t\t\t\t_beaconManager.SetRangeNotifier(_rangeNotifier);\n\t\n\t\t\t\t_tagRegion = new AltBeaconOrg.BoundBeacon.Region(\"myUniqueBeaconId\", Identifier.Parse(\"2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6\"), null, null);\n\t\t\t\t_emptyRegion = new AltBeaconOrg.BoundBeacon.Region(\"myEmptyBeaconId\", null, null, null);\n\t\n\t\t\t\t_beaconManager.StartRangingBeaconsInRegion(_tagRegion);\n\t\t\t\t_beaconManager.StartRangingBeaconsInRegion(_emptyRegion);\n\t\n\t\t\t\t_startButton.Enabled = false;\n\t\t\t}\n\t\n\t\t\tpublic void OnDismiss(IDialogInterface dialog)\n\t\t\t{\n\t\t\t\tFinish();\n\t\t\t}\n\t\n\t\t\tprivate async Task ClearData()\n\t\t\t{\n\t\t\t\tRunOnUiThread(() =\u003e\n\t\t\t\t{\n\t\t\t\t\t_data.Clear();\n\t\t\t\t\t((ListSource)_list.Adapter).UpdateList(_data);\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tprivate void UpdateList()\n\t\t\t{\n\t\t\t\tRunOnUiThread(() =\u003e \n\t\t\t\t{\n\t\t\t\t\t((ListSource)_list.Adapter).UpdateList(_data);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\n\t\tpublic class ListSource : BaseAdapter\u003cBeacon\u003e\n\t\t{\n\t\t\tprivate List\u003cBeacon\u003e _data;\n\t\t\tprivate Func\u003cList\u003cBeacon\u003e, int, Android.Views.View, Android.Views.ViewGroup, Android.Views.View\u003e _getView;\n\t\n\t\t\tpublic ListSource(Func\u003cList\u003cBeacon\u003e, int, Android.Views.View, Android.Views.ViewGroup, Android.Views.View\u003e getView)\n\t\t\t{\n\t\t\t\t_getView = getView;\n\t\t\t\t_data = new List\u003cBeacon\u003e();\n\t\t\t}\n\t\n\t\t\tpublic override long GetItemId(int position)\n\t\t\t{\n\t\t\t\treturn position;\n\t\t\t}\n\t\t\tpublic override Android.Views.View GetView(int position, Android.Views.View convertView, Android.Views.ViewGroup parent)\n\t\t\t{\n\t\t\t\treturn _getView(_data, position, convertView, parent);\n\t\t\t}\n\t\n\t\t\tpublic override int Count\n\t\t\t{\n\t\t\t\tget\n\t\t\t\t{\n\t\t\t\t\treturn _data.Count;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tpublic override Beacon this[int index]\n\t\t\t{\n\t\t\t\tget\n\t\t\t\t{\n\t\t\t\t\treturn _data[index];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tpublic void UpdateList(List\u003cBeacon\u003e list)\n\t\t\t{\n\t\t\t\t_data = list;\n\t\t\t\tNotifyDataSetChanged();\t\t\t\t\n\t\t\t}\n\t\t}\n\t}","Hash":"5704ada1a3c3bbf204a9e337345629d1","TargetPlatforms":["android"],"TrialHash":null}