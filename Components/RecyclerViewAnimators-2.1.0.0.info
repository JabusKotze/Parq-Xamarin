{"Name":"RecyclerView Animators","Id":2383,"Alias":"RecyclerViewAnimators","Description":"\n\u003ciframe src=\"https://appetize.io/embed/9jfpaxghkmpv4jz5v19b9507qw?device=nexus5\u0026scale=75\u0026autoplay=true\u0026orientation=portrait\u0026deviceColor=black\" \n        width=\"300px\" height=\"597px\" frameborder=\"0\" scrolling=\"no\"\n        style=\"float:right;margin-left:1em;\"\u003e\u003c/iframe\u003e\n\n**RecyclerView Animators** is an Android library that allows developers to easily create `RecyclerView`\nwith animations.\n\n**Features**\n - Animate addition and removal of `ItemAnimator`\n - Appearance animations for items in `RecyclerView.Adapter`\n\n## Using ItemAnimator\n\nFirst, set the `RecyclerView`\u0027s item animator.\n\n    var recyclerView = FindViewById\u003cRecyclerView\u003e(Resource.Id.list);\n    var animator = new SlideInUpAnimator(new OvershootInterpolator(1f);\n    recyclerView.SetItemAnimator(animator);\n\nThen, after modifying the list, use the `NotifyItemRemoved` and `NotifyItemInserted`\nmethods.\n\n    public void Remove(int position) {\n        dataset.RemoveAt(position);\n        NotifyItemRemoved(position);\n    }\n    \n    public void Add(string text, int position) {\n        dataset.Insert(position, text);\n        NotifyItemInserted(position);\n    }\n\nYou can change the durations.\n\n    var itemAnimator = recyclerView.GetItemAnimator();\n    itemAnimator.AddDuration = 1000;\n    itemAnimator.RemoveDuration = 1000;\n    itemAnimator.MoveDuration = 1000;\n    itemAnimator.ChangeDuration = 1000;\n\nAnd, change the interpolator.\n\n    var animator = new SlideInLeftAnimator();\n    animator.SetInterpolator(new OvershootInterpolator());\n    recyclerView.SetItemAnimator(animator);\n\n### Custom ItemAnimator Animations\n\nBy extending `AnimateViewHolder`, you can override preset animation. \nSo, custom animation can be set depending on view holder.\n\n    private class MyViewHolder : AnimateViewHolder\n    {\n        public MyViewHolder(View itemView)\n            : base (itemView)\n        {\n        }\n\n        public override void PreAnimateRemoveImpl()\n        {\n            ViewCompat.SetTranslationY(itemView, 0.0f);\n            ViewCompat.SetAlpha(itemView, 1);\n        }\n\n        public override void AnimateRemoveImpl(IViewPropertyAnimatorListener listener)\n        {\n            ViewCompat.Animate(itemView)\n                      .TranslationY(-itemView.Height * 0.3f)\n                      .Alpha(0)\n                      .SetDuration(300)\n                      .SetListener(listener)\n                      .Start();\n        }\n\n        public override void PreAnimateAddImpl()\n        {\n            ViewCompat.SetTranslationY(itemView, -itemView.Height * 0.3f);\n            ViewCompat.SetAlpha(itemView, 0);\n        }\n\n        public override void AnimateAddImpl(IViewPropertyAnimatorListener listener)\n        {\n            ViewCompat.Animate(itemView)\n                      .TranslationY(0)\n                      .Alpha(1)\n                      .SetDuration(300)\n                      .SetListener(listener)\n                      .Start();\n        }\n    }\n\n### Provided Item Animators\n\nThere are several `ItemAnimator` implementations that can be used \nto provide custom animations for the `RecyclerView`.\n\n**Cool**\n - `LandingAnimator`\n \n**Scale**\n - `ScaleInAnimator`\n - `ScaleInTopAnimator`\n - `ScaleInBottomAnimator`  \n - `ScaleInLeftAnimator`\n - `ScaleInRightAnimator`\n \n**Fade**\n - `FadeInAnimator`\n - `FadeInDownAnimator`\n - `FadeInUpAnimator`  \n - `FadeInLeftAnimator`\n - `FadeInRightAnimator`\n \n**Flip**\n - `FlipInTopXAnimator`\n - `FlipInBottomXAnimator`  \n - `FlipInLeftYAnimator`\n - `FlipInRightYAnimator`\n\n**Slide**\n - `SlideInLeftAnimator`\n - `SlideInRightAnimator`\n - `OvershootInLeftAnimator`\n - `OvershootInRightAnimator`  \n - `SlideInUpAnimator`\n - `SlideInDownAnimator`\n\n## RecyclerView Adapters\n\nIn addition to various item animators, there are various adapters that\nalso provide the means to use cusom animations. \n\nFirst, set the `RecyclerView` item animator by wrapping an existing adapter.\n\n    var recyclerView = FindViewById\u003cRecyclerView\u003e(Resource.Id.list);\n    var adapter = new MyAdapter();\n    var wrapped = new AlphaInAnimationAdapter(adapter);\n    recyclerView.SetAdapter(wrapped);\n\nThe wrapped adapter can be customized by changing the durations.\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    alphaAdapter.SetDuration(1000);\n    recyclerView.SetAdapter(alphaAdapter);\n\nOr, by changing the interpolator.\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    alphaAdapter.SetInterpolator(new OvershootInterpolator());\n    recyclerView.SetAdapter(alphaAdapter);\n\nOther customizations include the ability to disable the first scroll mode.\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    scaleAdapter.SetFirstOnly(false);\n    recyclerView.SetAdapter(alphaAdapter);\n\nAnd, to provide multiple animations:\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    var scaleAdapter = new ScaleInAnimationAdapter(alphaAdapter);\n    var recyclerView.setAdapter(scaleAdapter);\n\n### Provided Adapters\n\nThere are several `RecyclerView.Adapter` implementations that can be used \nto provide custom animations for the `RecyclerView`.\n\n**Alpha**\n - `AlphaInAnimationAdapter`\n\n**Scale**\n - `ScaleInAnimationAdapter`\n\n**Slide**\n - `SlideInBottomAnimationAdapter`  \n - `SlideInRightAnimationAdapter`\n - `SlideInLeftAnimationAdapter`\n","Version":"2.1.0.0","Summary":"An Android Animation library which easily add ItemAnimator to RecyclerView items.","QuickStart":"\n**RecyclerView Animators** is an Android library that allows developers to easily create `RecyclerView`\nwith animations.\n\n**Features**\n - Animate addition and removal of `ItemAnimator`\n - Appearance animations for items in `RecyclerView.Adapter`\n\n## Using ItemAnimator\n\nFirst, set the `RecyclerView`\u0027s item animator.\n\n    var recyclerView = FindViewById\u003cRecyclerView\u003e(Resource.Id.list);\n    var animator = new SlideInUpAnimator(new OvershootInterpolator(1f);\n    recyclerView.SetItemAnimator(animator);\n\nThen, after modifying the list, use the `NotifyItemRemoved` and `NotifyItemInserted`\nmethods.\n\n    public void Remove(int position) {\n        dataset.RemoveAt(position);\n        NotifyItemRemoved(position);\n    }\n    \n    public void Add(string text, int position) {\n        dataset.Insert(position, text);\n        NotifyItemInserted(position);\n    }\n\nYou can change the durations.\n\n    var itemAnimator = recyclerView.GetItemAnimator();\n    itemAnimator.AddDuration = 1000;\n    itemAnimator.RemoveDuration = 1000;\n    itemAnimator.MoveDuration = 1000;\n    itemAnimator.ChangeDuration = 1000;\n\nAnd, change the interpolator.\n\n    var animator = new SlideInLeftAnimator();\n    animator.SetInterpolator(new OvershootInterpolator());\n    recyclerView.SetItemAnimator(animator);\n\n### Custom ItemAnimator Animations\n\nBy extending `AnimateViewHolder`, you can override preset animation. \nSo, custom animation can be set depending on view holder.\n\n    private class MyViewHolder : AnimateViewHolder\n    {\n        public MyViewHolder(View itemView)\n            : base (itemView)\n        {\n        }\n\n        public override void PreAnimateRemoveImpl()\n        {\n            ViewCompat.SetTranslationY(itemView, 0.0f);\n            ViewCompat.SetAlpha(itemView, 1);\n        }\n\n        public override void AnimateRemoveImpl(IViewPropertyAnimatorListener listener)\n        {\n            ViewCompat.Animate(itemView)\n                      .TranslationY(-itemView.Height * 0.3f)\n                      .Alpha(0)\n                      .SetDuration(300)\n                      .SetListener(listener)\n                      .Start();\n        }\n\n        public override void PreAnimateAddImpl()\n        {\n            ViewCompat.SetTranslationY(itemView, -itemView.Height * 0.3f);\n            ViewCompat.SetAlpha(itemView, 0);\n        }\n\n        public override void AnimateAddImpl(IViewPropertyAnimatorListener listener)\n        {\n            ViewCompat.Animate(itemView)\n                      .TranslationY(0)\n                      .Alpha(1)\n                      .SetDuration(300)\n                      .SetListener(listener)\n                      .Start();\n        }\n    }\n\n### Provided Item Animators\n\nThere are several `ItemAnimator` implementations that can be used \nto provide custom animations for the `RecyclerView`.\n\n**Cool**\n - `LandingAnimator`\n \n**Scale**\n - `ScaleInAnimator`\n - `ScaleInTopAnimator`\n - `ScaleInBottomAnimator`  \n - `ScaleInLeftAnimator`\n - `ScaleInRightAnimator`\n \n**Fade**\n - `FadeInAnimator`\n - `FadeInDownAnimator`\n - `FadeInUpAnimator`  \n - `FadeInLeftAnimator`\n - `FadeInRightAnimator`\n \n**Flip**\n - `FlipInTopXAnimator`\n - `FlipInBottomXAnimator`  \n - `FlipInLeftYAnimator`\n - `FlipInRightYAnimator`\n\n**Slide**\n - `SlideInLeftAnimator`\n - `SlideInRightAnimator`\n - `OvershootInLeftAnimator`\n - `OvershootInRightAnimator`  \n - `SlideInUpAnimator`\n - `SlideInDownAnimator`\n\n## RecyclerView Adapters\n\nIn addition to various item animators, there are various adapters that\nalso provide the means to use cusom animations. \n\nFirst, set the `RecyclerView` item animator by wrapping an existing adapter.\n\n    var recyclerView = FindViewById\u003cRecyclerView\u003e(Resource.Id.list);\n    var adapter = new MyAdapter();\n    var wrapped = new AlphaInAnimationAdapter(adapter);\n    recyclerView.SetAdapter(wrapped);\n\nThe wrapped adapter can be customized by changing the durations.\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    alphaAdapter.SetDuration(1000);\n    recyclerView.SetAdapter(alphaAdapter);\n\nOr, by changing the interpolator.\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    alphaAdapter.SetInterpolator(new OvershootInterpolator());\n    recyclerView.SetAdapter(alphaAdapter);\n\nOther customizations include the ability to disable the first scroll mode.\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    scaleAdapter.SetFirstOnly(false);\n    recyclerView.SetAdapter(alphaAdapter);\n\nAnd, to provide multiple animations:\n\n    var adapter = new MyAdapter();\n    var alphaAdapter = new AlphaInAnimationAdapter(adapter);\n    var scaleAdapter = new ScaleInAnimationAdapter(alphaAdapter);\n    var recyclerView.setAdapter(scaleAdapter);\n\n### Provided Adapters\n\nThere are several `RecyclerView.Adapter` implementations that can be used \nto provide custom animations for the `RecyclerView`.\n\n**Alpha**\n - `AlphaInAnimationAdapter`\n\n**Scale**\n - `ScaleInAnimationAdapter`\n\n**Slide**\n - `SlideInBottomAnimationAdapter`  \n - `SlideInRightAnimationAdapter`\n - `SlideInLeftAnimationAdapter`\n","Hash":"3e3f086a3d6d66ae617e1ae3ced3f734","TargetPlatforms":["android"],"TrialHash":null}