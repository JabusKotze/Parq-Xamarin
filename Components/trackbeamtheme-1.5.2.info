{"Name":"Trackbeam Theme","Id":2410,"Alias":"trackbeamtheme","Description":"The TrackBeam Theme for iOS provides a great looking theme for your iPhone and iPad applications.\n\n**Features**  \n\n - New Fluent API  \n - Easily Customisable by sub-classing\n - Simple Clean API\n - Uses Apples UIAppearance API\n - Works with Unified and Classic Xamarin.iOS\n - V1 API still available for backward compatibility with previous Xamarin Themes\n\n**Usage**  \n\nTo style your app with the default theme, `TrackBeamTheme`, you register the theme and apply it to the app within the `FinishedLaunching` method\n\n\tusing Xamarin.Themes;\n\tusing Xamarin.Themes.Core;\n\tusing Xamarin.Themes.TrackBeam;\n\t...\n\t\n\tpublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n\t{\n\t\t...\n\t\tThemeManager.Register\u003cTrackBeamTheme\u003e().Apply();\n\t}\n\n\nTo apply a customised theme simply sub-class the `TrackBeamTheme` and override the virutal properties that you want to change\n\n\tusing Xamarin.Themes.TrackBeam;\n\t...\n\t\n\tpublic class CustomTheme : TrackBeamTheme\n\t{\n\t\tpublic override MonoTouch.UIKit.UIColor BaseTintColor\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn UIColor.Red;\n\t\t\t}\n\t\t}\n\t}\n \n You can then apply your custom theme simply by registering and applying it to the app as before\n \n\tpublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n\t{\n\t\t...\n\t\tThemeManager.Register\u003cCustomTheme\u003e().Apply();\n\t}\n\t\n\n","Version":"1.5.2","Summary":"Trackbeam theme and sample application for iOS.","QuickStart":"## Usage  \n\n**Registering and Applying a theme**\n\nTo style your app with the default theme, `TrackBeamTheme`, you register the theme and apply it to the app within the `FinishedLaunching` method\n\n\tusing Xamarin.Themes;\n\tusing Xamarin.Themes.Core;\n\tusing Xamarin.Themes.TrackBeam;\n\t...\n\t\n\tpublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n\t{\n\t\t...\n\t\tThemeManager.Register\u003cTrackBeamTheme\u003e().Apply();\n\t}\n\n\nTo apply a customised theme simply sub-class `TrackBeamTheme` and override the virtual properties that you want to change\n\n\tusing Xamarin.Themes.TrackBeam;\n\t...\n\t\n\tpublic class CustomTheme : TrackBeamTheme\n\t{\n\t\t//Change the BaseTintColor\n\t\tpublic override MonoTouch.UIKit.UIColor BaseTintColor\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn UIColor.Red;\n\t\t\t}\n\t\t}\n\t}\n \n You can then apply your custom theme simply by registering and applying it to the app as before\n \n\tpublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n\t{\n\t\t...\n\t\tThemeManager.Register\u003cCustomTheme\u003e().Apply();\n\t}\n\n**Background images**\n\nAs of version 1.5 you are able to override the filenames of the background images for the Views, Toolbar, Tabbar and Navigation bars.\n\nSimply create a sub-class of the `TrackBeamTheme` class and override one or more of the following properties.\n\n - PhoneBackgroundName\n - PhoneBackgroundLandscapeName\n - PadBackgroundName\n - PadBackgroundLandscapeName\n - ToolbarBackgroundName\n - ToolbarLandscapeBackgroundName\n - NavigationBarBackgroundName\n - NavigationBarLandscapeBackgroundName\n - NavigationBarRightBackgroundName\n - NavigationBarRightLandscapeBackgroundName\n - TabbarBackgroundName\n\n\n**Apply to views**  \n\nYou can also selectively apply the theme to specific views by using the relevant `Apply` method for the view type.\n\n\tpublic override void ViewWillAppear (bool animated)\n\t{\n\t\tbase.ViewWillAppear (animated);\n\t\t\n\t\t//View is a UIView\n\t\tThemeManager.Current.Apply(View);\n\t\n\t}\n\nor by the Appearance for that view type\n\n\tpublic override void ViewWillAppear (bool animated)\n\t{\n\t\tbase.ViewWillAppear (animated);\n\t\t\n\t\t//\n\t\tThemeManager.Current.Apply(UIView.Appearance);\n\t}\n\t\nTo apply the theme to specific view classes only when they are contained within other specific view classes, use AppearanceWhenContainedIn.\n\n\tpublic override void ViewWillAppear (bool animated)\n\t{\n\t\tbase.ViewWillAppear (animated);\n\t\t\n\t\t//\n\t\tThemeManager.Current.Apply(UIProgressView.AppearanceWhenContainedIn (typeof (UINavigationBar)));\n\t}  \n\n**Fluent API**  \nThe TrackBeamTheme has been designed with a Fluent style API allowing you to chain several calls together to create more attractive and readable code.\n\n\tpublic override void ViewDidLoad ()\n\t{\n\t\tbase.ViewDidLoad ();\n\t\t\n\t\tthis.Title = \"Elements\";\n\t\t\n\t\t//Apply theme to multiple elements\n\t\tThemeManager.Current.Apply(View)\n\t\t\t.Apply(loginButton)\n\t\t\t.Apply(registerButton)\n\t\t\t.Apply(textField);\n\t}\n\n**V1 API**  \nIn previous Xamarin Themes we have used an API based around static methods on the theme Class, which we now refer to as the V1 API.  We are moving away from the approach but we have provided a V1 style implementation just incase you wish to use it.\n\nThe V1 implementation exists in the `Xamarin.Themes.V1.TrackBeam` namespace and there is a `TrackBeamTheme` class that provides all of the V1 methods.  This can be used instead of the new API in the same as before.\n\n\tusing Xamarin.Themes.V1.TrackBeam;\n\t...\n\t\n\tpublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n\t{\n\t\t...\n\t\tTrackBeamTheme.Apply();\n\t}\n\n*Note: This class and all the methods are flagged as obsolete and it is just a thin wrapper around the new API* \n\n**Supported Views**  \nBelow is a list of the controls that can themed, though not all of them are implemented. \n \n - UIView  \n - UIBarButtonItem  \n - UIToolbar  \n - UISlider  \n - UISegmentedControl  \n - UIProgressView  \n - UITabBar  \n - UIButton  \n - UISearchBar  \n - UISwitch  \n - UITextField  \n - UILabel  \n - UITableView\n - UIRefreshControl\n - UITableViewCell\n - UITableViewController\n - UIViewController\n \n\n","Hash":"3cc10bf93ea4110949919312f61a23e5","TargetPlatforms":["ios"],"TrialHash":null}