{"Name":"Gravatar Mobile API","Id":1397,"Alias":"gravatarmobile","Description":"Gravatar Mobile API is a cross platfrom framework for integration of Gravatar in to your mobile application.\n\n# Features\n\n* Cross platform  \n  * Works on iOS, Android, Windows Phone, Mac and Windows\n* Support for Gravatar images and profiles\n* Small footprint\n* Simple API\n* PCL core library\n* Helper libraries for iOS, Android and Windows phone with implementations of \"GravatarView\"\n* Extensions for converting to native image types\n\n## Usage\n\nA `Gravatar` object can be created by passing an email address to the constructor.\n\n\n\tusing GravatarMobile.Core;\n\t...\n\t\n\tvar aVatar = new Gravatar(\"someone@somewhere.com\");\n\t\nOnce created you can call the methods to load the image and the profile in to the `Gravatar` using async calls\n\n\tusing GravatarMobile.Core;\n\t...\n\t\n\tvar aVatar = new Gravatar(\"someone@somewhere.com\");\n\t\n\t//load the default size image of 80px\n\tawait aVatar.LoadImageAsync();\n\t\n\t//load avatar of a specific size\n\tawait aVatar.LoadImageAsync(512);\n\t\n\t//load the profile\n\tawait aVatar.LoadProfileAsync();\n\t\n\nOn iOS, Android and windows phone we provide a `GravatarView` that can display a Avatar for you.  You can simply pass a gravatar to it to load the Image, by passing it to the `Avatar` property\n\n\n\tusing GravatarMobile.Core;\n\t...\n\t\n\tvar aVatar = new Gravatar(\"someone@somewhere.com\");\n\t\n\t//refernece the instance of GravatarView\n\tgravView.Avatar = aVatar;\n\t","Version":"1.2","Summary":"Mobile API for Gravatar with support for images and profiles","QuickStart":"Gravatar Mobile API is a cross platfrom framework for integration of Gravatar in to your mobile application.\n\n## Usage\n\nA `Gravatar` object can be created by passing an email address to the constructor.\n\n\n\tusing GravatarMobile.Core;\n\t...\n\t\n\tvar aVatar = new Gravatar(\"someone@somewhere.com\");\n\t\nOnce created you can call the methods to load the image and the profile in to the `Gravatar` using async calls\n\n\tusing GravatarMobile.Core;\n\t...\n\t\n\tvar aVatar = new Gravatar(\"someone@somewhere.com\");\n\t\n\t//load the default size image of 80px\n\tawait aVatar.LoadImageAsync();\n\t\n\t//load avatar of a specific size\n\tawait aVatar.LoadImageAsync(512);\n\t\n\t//load the profile\n\tawait aVatar.LoadProfileAsync();\n\t\n\n## GravatarView\n\nOn iOS, Android and windows phone we provide a `GravatarView` which implements `IGravatarView` that can display a Avatar for you.  You can simply pass a gravatar to it to load the Image, by passing it to the `Avatar` property\n\n\n\tusing GravatarMobile.Core;\n\t...\n\t\n\tvar aVatar = new Gravatar(\"someone@somewhere.com\");\n\t\n\t//refernece the instance of GravatarView\n\tgravView.Avatar = aVatar;\n\t\n\nWhen passed in this way the image loaded from Gravatar will be set to the size of the `GravatarView` instances dimensions.\n\nYou can set the style of the GravatarView to be either `Round` or `Square` using the `ViewStyle`property and you can also set the size of the border to be drawn around the image using the `BorderWidth` property\n\n**iOS**\n\n\u0027GravatarView\u0027 on iOS will work when created programatically, from an xib and within a storyboard.\n\nYou can create one programatically using the standard `Frame` based contructor after which it can be added to you view controller\n\n\tusing GravatarMobile.Core;\n\tusing GravatarMobile.iOS;\n\t...\n\t\n\tpublic override void ViewDidLoad()\n\t{\n\t\tbase.ViewDidLoad();\n\t\t\n\t\tvar gravView = new GravatarView(RectangleF.Empty);\n\t\t\n\t\t//refernece the instance of GravatarView\n\t\tgravView.Avatar = new Gravatar(\"someone@somewhere.com\");\n\t\t\n\t\tthis.View.Add(gravView);\n\t\t\n\t}\t\n\nIn the iOS Storyboard designer you can access both the `ViewStyle` and `BorderWidth` properties.\n\n**Android**\n\nIn Android you can include the `GravatarView` in your xml layout\n\n    \u003cgravatarmobile.droid.GravatarView xmlns:gravview=\"http://schemas.android.com/apk/res-auto\"\n        android:src=\"@android:drawable/ic_menu_gallery\"\n        android:layout_width=\"192dp\"\n        android:layout_height=\"192dp\"\n        android:id=\"@+id/imgGravatar\"\n        gravview:initial_style=\"round\" /\u003e\t\n        \n\nYou can also create an instance programatically and add it as a sub-view.\n\nThe `initial_style` attribute can be set to `round` or `square` to set the load style\n\n**Windows Phone**\n\nOn windows phone you can add the `GravatarView` into your xaml definition\n\n\txmlns:WP=\"clr-namespace:GravatarMobile.WP;assembly=GravatarMobile.WP\" \n\t...\n\t\n\t   \u003cWP:GravatarView \n    \t   x:Name=\"imgGravatar\" \n       \t   Margin=\"0,10,0,0\" \n           Width=\"320\" \n           Height=\"320\"\n           IntitialViewStyle=\"Round\"/\u003e\n\n","Hash":"76db437eeee10b8f45c7d738e81ae387","TargetPlatforms":["ios","android"],"TrialHash":null}